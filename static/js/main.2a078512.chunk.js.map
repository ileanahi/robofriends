{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","React","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2a078512.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => (\n  <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n    <img src={`https://robohash.org/${id}?200x200`} alt={`\"${name}\"`} />\n    <div>\n      <h2>{name}</h2>\n      <p>{email}</p>\n    </div>\n  </div>\n);\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => (\n  <div>\n    {\n            robots.map((user, i) => (\n              <Card\n                key={robots[i].id}\n                id={robots[i].id}\n                name={robots[i].name}\n                email={robots[i].email}\n              />\n            ))\n        }\n  </div>\n);\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchField, searchChange }) => (\n  <div className=\"pa2\">\n    <input\n      className=\"pa3 ba b--green bg-lightest-blue\"\n      type=\"search\"\n      placeholder=\"search robots\"\n      onChange={searchChange}\n    />\n  </div>\n);\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => (\n  <div style={{ overflowY: 'scroll', border: '1px solid black', height: '500px' }}>\n    {props.children}\n  </div>\n);\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Ooops. That is not good.</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = (state) => ({\n  searchField: state.searchRobots.searchField,\n  robots: state.requestRobots.robots,\n  isPending: state.requestRobots.isPending,\n  error: state.requestRobots.error,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n  onRequestRobots: () => dispatch(requestRobots()),\n});\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const {\n      searchField, onSearchChange, robots, isPending,\n    } = this.props;\n    const filteredRobots = robots.filter((robot) => robot.name.toLowerCase().includes(searchField.toLowerCase()));\n    return isPending ? <h1>Loading...</h1>\n      : (\n        <div className=\"tc\">\n          <h1>RoboFriends</h1>\n          <SearchBox searchChange={onSearchChange} />\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from './constants';\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then((response) => response.json())\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch((error) => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n};\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from './constants';\n\nconst initialStateSearch = {\n  searchField: '',\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: '',\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true };\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false };\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: action.payload, isPending: false };\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}